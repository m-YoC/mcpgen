
package main

import (
	"fmt"
  "log"
  "os"
  yaml "gopkg.in/yaml.v2"
)


func samplefilename() string {
  return "sample.yml"
}


func read_interface() {
  fmt.Printf("* Yaml file read test (interface{})\n")

  f, err := os.Open(samplefilename())
  if err != nil {
    log.Fatal(err)
  }
  defer f.Close()

  var m map[string]interface{}

  if err := yaml.NewDecoder(f).Decode(&m); err != nil {
    log.Fatal(err)
  }

  fmt.Printf("%v\n", m)
  // interface{}型で取り出した場合，型アサーションしないといけない
  fmt.Printf("%v\n", m["services"].(map[interface{}]interface{})["golang"].(map[interface{}]interface{})["image"].(string))
}




// https://zhwt.github.io/yaml-to-go/
type AutoGenerated struct {
  Services struct {
    Golang struct {
      Build struct {
        Context    string `yaml:"context"`
        Dockerfile string `yaml:"dockerfile"`
        Args       struct {
          WORKDIR string `yaml:"WORKDIR"`
        } `yaml:"args"`
      } `yaml:"build"`
      Image    string   `yaml:"image"`
      Hostname string   `yaml:"hostname"`
      Volumes  []string `yaml:"volumes"`
      Tty      bool     `yaml:"tty"`
    } `yaml:"golang"`
  } `yaml:"services"`
}


func read_struct(flag bool) AutoGenerated {
  if flag {
    fmt.Printf("* Yaml file read test (struct)\n")
  }

  f, err := os.Open(samplefilename())
  if err != nil {
    log.Fatal(err)
  }
  defer f.Close()

  var m AutoGenerated

  if err := yaml.NewDecoder(f).Decode(&m); err != nil {
    log.Fatal(err)
  }

  if flag {
    fmt.Printf("%v\n", m)
    fmt.Printf("%v\n", m.Services.Golang.Image)
  }
  
  return m
}


func write_struct() {
  fmt.Printf("* Yaml file write test (struct)\n")

  // read
  m := read_struct(false)

  // change
  m.Services.Golang.Image = "rewrited"
  fmt.Printf("%v\n", m)

  // write
  f, err := os.OpenFile("sample_write.yml", os.O_WRONLY | os.O_CREATE, 0664)
  if err != nil {
    log.Fatal(err)
  }
  defer f.Close()

  d := yaml.NewEncoder(f)

  if err := d.Encode(&m); err != nil {
    log.Fatal(err)
  }

  d.Close()
}


func main() {
  read_interface()
  read_struct(true)
  write_struct()
}
